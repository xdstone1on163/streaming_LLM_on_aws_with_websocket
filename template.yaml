AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'



Resources:
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: service-role-apigateway-websocket-demo-2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                  - "lambda.amazonaws.com"
                  - "apigateway.amazonaws.com"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:*
                Resource: '*'
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
        - PolicyName: AmazonAPIGatewayInvokeFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: apigateway:*
                Resource: '*'
        - PolicyName: AWSLambda_FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:*
                Resource: '*'
        - PolicyName: executeAPIforWebsocketConnectionPost
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: execute-api:ManageConnections
                Resource: 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${socketAPI}/dev/POST/@connections/*'

  socketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
        Name: "socketAPI"
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: MyIAMRole
    Properties:
         ApiId: !Ref socketAPI
         IntegrationType: AWS_PROXY
         CredentialsArn: !Sub 
          - "${role}"
          - role: !GetAtt MyIAMRole.Arn
         IntegrationUri: !Sub 
          - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambdaARN}/invocations"
          - ConnectLambdaARN: !GetAtt ConnectLambda.Arn
  
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
         RouteKey: $connect
         ApiId: !Ref socketAPI
         OperationName: ConnectRoute
         Target: !Sub "integrations/${ConnectInteg}"

  ConnectLambda:
    Type: 'AWS::Serverless::Function'
    DependsOn: MyIAMRole
    Properties:
      FunctionName: 'connect-lambda'
      CodeUri: lambdas/connect_lambda/
      Role: !Sub 
        - "${role}"
        - role: !GetAtt MyIAMRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600

  ConnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
         - socketAPI
    Properties:
      FunctionName: !Ref ConnectLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${socketAPI}/*/$connect'

  StreamingOpenai:
    Type: 'AWS::Serverless::Function'
    DependsOn: MyIAMRole
    Properties:
      FunctionName: 'streaming-openai'
      CodeUri: lambdas/streaming_openai_lambda/
      Role: !Sub 
        - "${role}"
        - role: !GetAtt MyIAMRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600
      Layers:
        - !Ref OpenaiLayer
      Environment:
        Variables:
          openai_key: "openai_key"
          region: !Sub "${AWS::Region}"
          api_endpoint: !Sub "https://${socketAPI}.execute-api.${AWS::Region}.amazonaws.com/dev"
  
  OpenaiInteg:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: MyIAMRole
    Properties:
         ApiId: !Ref socketAPI
         IntegrationType: AWS_PROXY
         CredentialsArn: !Sub 
          - "${role}"
          - role: !GetAtt MyIAMRole.Arn
         IntegrationUri: !Sub 
          - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambdaARN}/invocations"
          - ConnectLambdaARN: !GetAtt StreamingOpenai.Arn
  
  OpenaiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
         RouteKey: openai
         ApiId: !Ref socketAPI
         OperationName: OpenaiRoute
         Target: !Sub "integrations/${OpenaiInteg}"

  StreamingOpenaiLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
         - socketAPI
    Properties:
      FunctionName: !Ref StreamingOpenai
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${socketAPI}/*/openai'
  
  StreamingBedrock:
    Type: 'AWS::Serverless::Function'
    DependsOn: MyIAMRole
    Properties:
      FunctionName: 'streaming-bedrock'
      CodeUri: lambdas/streaming_bedrock_lambda/
      Role: !Sub 
        - "${role}"
        - role: !GetAtt MyIAMRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600
      Environment:
        Variables:
          region: !Sub "${AWS::Region}"
          api_endpoint: !Sub "https://${socketAPI}.execute-api.${AWS::Region}.amazonaws.com/dev"
  
  BedrockInteg:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: MyIAMRole
    Properties:
         ApiId: !Ref socketAPI
         IntegrationType: AWS_PROXY
         CredentialsArn: !Sub 
          - "${role}"
          - role: !GetAtt MyIAMRole.Arn
         IntegrationUri: !Sub 
          - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambdaARN}/invocations"
          - ConnectLambdaARN: !GetAtt StreamingBedrock.Arn
  
  BedrockRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
         RouteKey: bedrock
         ApiId: !Ref socketAPI
         OperationName: BedrockRoute
         Target: !Sub "integrations/${BedrockInteg}"

  StreamingBedrockLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
         - socketAPI
    Properties:
      FunctionName: !Ref StreamingBedrock
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${socketAPI}/*/bedrock'

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn: MyIAMRole
    Properties:
         ApiId: !Ref socketAPI
         IntegrationType: AWS_PROXY
         CredentialsArn: !Sub 
          - "${role}"
          - role: !GetAtt MyIAMRole.Arn
         IntegrationUri: !Sub 
          - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambdaARN}/invocations"
          - ConnectLambdaARN: !GetAtt DiconnectLambda.Arn
  
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
         RouteKey: $disconnect
         ApiId: !Ref socketAPI
         OperationName: DisconnectRoute
         Target: !Sub "integrations/${DisconnectInteg}"

  DiconnectLambda:
    Type: 'AWS::Serverless::Function'
    DependsOn: MyIAMRole
    Properties:
      FunctionName: 'disconnect-lambda'
      CodeUri: lambdas/disconnect_lambda/
      Role: !Sub 
        - "${role}"
        - role: !GetAtt MyIAMRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 600

  DisconnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
         - socketAPI
    Properties:
      FunctionName: !Ref DiconnectLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${socketAPI}/*/$connect'


  OpenaiLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: 'openai-layer'
      Description: Layer for openai
      ContentUri: layers/openai/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      Description: dev Stage
      ApiId: !Ref socketAPI
      DeploymentId: !Ref Deployment

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
         - ConnectRoute
         - DisconnectRoute
         - OpenaiRoute
         - BedrockRoute
    Properties:
      ApiId: !Ref socketAPI



Outputs:
  socketAPI:
    Description: URL for the API Gateway
    Value: !Ref socketAPI
